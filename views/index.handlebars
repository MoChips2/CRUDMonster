<!-- Optional JavaScript -->
<!-- jQuery first, then Popper.js, then Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
  crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js" integrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut"
  crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js" integrity="sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k"
  crossorigin="anonymous"></script>
<script src="./js/form-views.js"></script>
<div class="container">
  <!-- ###### HEADER WITH TITLE ######-->
  <div class="row">
    <div class="col-md-12 title">
      <h1 id="header-title">WHERE MY DOUGH GO?</h1>
    </div>
  </div>

  <div class="row row1">

    <!--##########################################################-->
    <!-- Login and Sign up Links -->
    <!--##########################################################-->
    <div class="col-md-4 left-side">
      <h3 class="link"><span id="login">login</span> &nbsp;<span id="signup">sign up</span></h3>

      <!--##########################################################-->
      <!-- Sign up form -->
      <!--##########################################################-->
      <form id="signup-form" class="hide" action="/register-username" method="post" onsubmit="return validateRegistration()">
        <div id="message">

        </div>

        <div class="form-group">
          <label for="name-input"><b>Username</b></label>

          <input class="form-control" id="name-input" type="text" pattern="[a-zA-Z0-9]+" placeholder="Create a username"
            name="name" required minlength="4" maxlength="12" size="15">
        </div>
        <div class="form-group">
          <label for="psw-input"><b>Password</b> (must use letters and numbers)</label>

          <input class="form-control" id="psw-input" type="password" pattern="(?=.*\d)(?=.*[a-z]).{8,}" placeholder="Enter Password"
            name="psw" required minlength="8" maxlength="12" size="15">
        </div>
        <div class="form-group">
          <label for="confpsw-input"><b>Confirm Password</b></label>
          <input class="form-control" id="confpsw-input" type="password" pattern="(?=.*\d)(?=.*[a-z]).{8,}" placeholder="Confirm Password"
            name="psw" required minlength="8" maxlength="12" size="15">
        </div>
        <div class="form-group">
          <button class="btn btn-primary" id="sign-up" type="submit">Sign Up</button>

          <button type="button" onclick="document.getElementById('id02').style.display='none'" class="btn btn-danger cancelbtn">Cancel</button>
        </div>
        <div class="form-group">
          <input class="remember-me" type="checkbox" name="remember">
          <label class="form-check-label" for="exampleCheck1">Remember me</label>
          <label for="message" id="lblmessage"></label>
        </div>

        <div class="form-group">
          <span class="psw"><a class="psw" href="#">Forgot password?</a></span>
        </div>
      </form>

      <!--##########################################################-->
      <!-- Login form -->
      <!--##########################################################-->
      <form id="login-form" action="#">
        <div class="form-group">
          <label for="uname-input"><b>Username</b></label>
          <input class="form-control" id="uname-input" type="text" placeholder="Enter Username" name="uname" required
            minlength="8" maxlength="12" size="15">
        </div>
        <div class="form-group">
          <label for="upsw-input"><b>Password</b></label>
          <input class="form-control upsw-input" type="password" placeholder="Enter Password" name="upsw" required
            minlength="8" maxlength="12" size="15">
        </div>
        <div class="form-group">

          <button class="btn btn-primary" id="sign-on" type="submit">Login</button>



          <button class="btn btn-danger cancelbtn" type="button" onclick="document.getElementById('id01').style.display='none'"
            class="cancelbtn">Cancel</button>
        </div>
        <div class="form-group">
          <input class="remember-me" type="checkbox" name="remember">
          <label class="form-check-label" for="message" id="lblmessage1">Remember Me</label>
        </div>
        <div class="form-group">
          <span class="psw"><a class="psw" href="#">Forgot password?</a></span>
        </div>

      </form>
      <br />

      <!--##########################################################-->
      <!-- Month Selection -->
      <!--##########################################################-->
      <div class="btn-group">
        <button class="btn btn-secondary btn-lg dropdown-toggle" id="month-dropdown" type="button" data-toggle="dropdown"
          aria-haspopup="true" aria-expanded="false">
          MONTH
        </button>
        <div class="dropdown-menu">
          <option>January 2019</option>
          <option>December 2018</option>
          <option>November 2017</option>
        </div>
      </div>
      <br />

      <!--##########################################################-->
      <!-- Income Form -->
      <!--##########################################################-->
      <form id="new-expense-form">
        <h2 class="header">income</h2>
        <div class="form-row">
          <div class="col">
            <select class="form-control" id="income-category">
              <!-- User chooses a category (Entered dummy data. Change as needed)-->
              <option class="choose">Category...</option>
              <option>Primary Job</option>
              <option>Uber</option>
              <option>Secondary Job</option>
              <option>Ebay</option>
              <option>Gift</option>
            </select>
          </div>
        </div>
        <div class="form-row">
          <!-- User enters the amount -->
          <div class="input-group col">
            <span class="input-group-addon">$&nbsp;</span>
            <input type="number" value="0.00" min="0" step="0.01" data-number-to-fixed="2" data-number-stepfactor="100"
              class="form-control currency" id="income-amount" />
          </div>
          <!-- User enters the date -->
          <div class="col">
            <input type="date" class="form-control" id="income-date">
          </div>
          <!-- Submit button should submit all four values to the database -->

        </div>

        <div class="right">
          <button class="btn btn-primary" id="new-income-submit" type="submit">Submit</button>
        </div>

      </form>


    </div>
    <div class="col-md-8">

      <!--##########################################################-->
      <!-- Input new expense form -->
      <!--##########################################################-->
      <form id="new-expense-form">
        <h2 class="header">new purchase</h2>
        <div class="form-row">
          <div class="col">
            <select class="form-control" id="category">
              <!-- User chooses a category (Entered dummy data. Change as needed)-->
              <option class="choose">Category...</option>
              <option>Rent</option>
              <option>Mortgage</option>
              <option>Food</option>
              <option>Gas</option>
              <option>Entertainment</option>
              <option>Clothing</option>
              <option>TV</option>
              <option>Phone</option>
              <option>Internet</option>
              <option>Medical</option>
              <option>Car Payment</option>
            </select>
          </div>
          <!-- User enters the description -->
          <div class="col">
            <input type="text" class="form-control" id="description" placeholder="What you get?">
          </div>
          <br />

          <!-- User enters the amount -->
          <div class="input-group col">
            <span class="input-group-addon">$&nbsp;</span>
            <input type="number" value="0.00" min="0" step="0.01" data-number-to-fixed="2" data-number-stepfactor="100"
              class="form-control currency" id="amount" />
          </div>
          <!-- User enters the date -->
          <div class="col">
            <input type="date" class="form-control" id="date">
          </div>
          <!-- Submit button should submit all four values to the database -->
        </div>

        <div class="right">
          <button class="btn btn-primary" id="new-expense-submit" type="submit">Submit</button>
        </div>
      </form>

      <!--#############################################################-->
      <!-- Table of categories and total amounts spent -->
      <!--#############################################################-->

      <!-- The following is dummy data. Any of it can be changed. -->
      <table class="table table-borderless">
        <thead>
          <tr>
            <th scope="col" id="category-column">STUFF</th>
            <th scope="col" id="expense-column">MONEY</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td class="category-td">RENT</td>
            <td class="expense-td">$955.00</td>
          </tr>
          <tr>
            <td class="category-td">FOOD</td>
            <td class="expense-td">$320.00</td>
          </tr>
          <tr>
            <td class="category-td">GAS</td>
            <td class="expense-td">$155.00</td>
          </tr>
          <tr>
            <td class="category-td">ENTERTAINMENT</td>
            <td class="expense-td">$180.00</td>
          </tr>
          <tr>
            <td class="category-td">CLOTHING</td>
            <td class="expense-td">$85.00</td>
          </tr>
          <tr>
            <td class="category-td">TV</td>
            <td class="expense-td">$10.00</td>
          </tr>
          <tr>
            <td class="category-td">INTERNET</td>
            <td class="expense-td">$120.00</td>
          </tr>
          <tr>
            <td class="category-td">MEDICAL</td>
            <td class="expense-td">$50.00</td>
          </tr>
          <tr>
            <td class="category-td">CAR</td>
            <td class="expense-td">$60.00</td>
          </tr>
          <tr>
            <td class="category-td">CELL PHONE</td>
            <td class="expense-td">$160.00</td>
          </tr>
          <!-- This row will have the total expenses of all the categories -->
          <tr class="total-expense-row">
            <td id="total-category">TOTAL</td>
            <td id="total-expense">$2155.00</td>
          </tr>
        </tbody>
      </table>

      <!--#############################################################-->
      <!-- Table of total spent, total earned and difference -->
      <!--#############################################################-->
      <table class="table table-borderless" id="math-table">
        <thead>
          <tr>
            <th colspan="2" id="math">MATH IT UP!</th>
          </tr>
        </thead>
        <tbody>
          <!-- Income value -->
          <tr>
            <td class="category-td">INCOME</td>
            <td class="expense-td">$4250.00</td>
          </tr>
          <!-- Using total of all categories' expenses. -->
          <tr>
            <td class="category-td">EXPENSES</td>
            <td class="expense-td">$2155.00</td>
          </tr>
          <!-- The difference between income and expenses -->
          <tr class="total-savings-row">
            <td id="total-savings-category">YO-DOUGH</td>
            <td id="total-savings">$2095.00</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>
{{!-- INBUILD SRIPT --}}
<script>
  function validateRegistration() {
    console.log("inside");
    var illChars = /\W/;
    var name = $("#name-input")
      .val()
      .trim();
    var passwordField = $("#psw-input")
      .val()
      .trim();
    var confirmPassword = $("#confpsw-input")
      .val()
      .trim();

    if (name === "") {
      alert("Please enter a username");
    } else if (name.length < 5 || name.length > 15) {
      alert("Your username is the wrong length (5-15 characters allowed).");
    } else if (illChars.test(name)) {
      alert("Username can use letters, numbers and/or underscores.");
    } else {
      console.log(name);
    }
    if (passwordField === confirmPassword) {
      var password = SHA512(passwordField);
      console.log(password);
    } else {
      //$("#message").html = "Passwords don't match!";
      alert("mismatch");
      return false;
    }
    var input = {
      name: name,
      password: password
    };
    console.log(input);
    return true;
  }
  // PASSWORD PROTECTION SHA algo
  /*
* Secure Hash Algorithm (SHA512)
* http://www.happycode.info/
*/

  function SHA512(str) {
    function int64(msint_32, lsint_32) {
      this.highOrder = msint_32;
      this.lowOrder = lsint_32;
    }

    var H = [new int64(0x6a09e667, 0xf3bcc908), new int64(0xbb67ae85, 0x84caa73b),
    new int64(0x3c6ef372, 0xfe94f82b), new int64(0xa54ff53a, 0x5f1d36f1),
    new int64(0x510e527f, 0xade682d1), new int64(0x9b05688c, 0x2b3e6c1f),
    new int64(0x1f83d9ab, 0xfb41bd6b), new int64(0x5be0cd19, 0x137e2179)];

    var K = [new int64(0x428a2f98, 0xd728ae22), new int64(0x71374491, 0x23ef65cd),
    new int64(0xb5c0fbcf, 0xec4d3b2f), new int64(0xe9b5dba5, 0x8189dbbc),
    new int64(0x3956c25b, 0xf348b538), new int64(0x59f111f1, 0xb605d019),
    new int64(0x923f82a4, 0xaf194f9b), new int64(0xab1c5ed5, 0xda6d8118),
    new int64(0xd807aa98, 0xa3030242), new int64(0x12835b01, 0x45706fbe),
    new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, 0xd5ffb4e2),
    new int64(0x72be5d74, 0xf27b896f), new int64(0x80deb1fe, 0x3b1696b1),
    new int64(0x9bdc06a7, 0x25c71235), new int64(0xc19bf174, 0xcf692694),
    new int64(0xe49b69c1, 0x9ef14ad2), new int64(0xefbe4786, 0x384f25e3),
    new int64(0x0fc19dc6, 0x8b8cd5b5), new int64(0x240ca1cc, 0x77ac9c65),
    new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),
    new int64(0x5cb0a9dc, 0xbd41fbd4), new int64(0x76f988da, 0x831153b5),
    new int64(0x983e5152, 0xee66dfab), new int64(0xa831c66d, 0x2db43210),
    new int64(0xb00327c8, 0x98fb213f), new int64(0xbf597fc7, 0xbeef0ee4),
    new int64(0xc6e00bf3, 0x3da88fc2), new int64(0xd5a79147, 0x930aa725),
    new int64(0x06ca6351, 0xe003826f), new int64(0x14292967, 0x0a0e6e70),
    new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),
    new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, 0x9d95b3df),
    new int64(0x650a7354, 0x8baf63de), new int64(0x766a0abb, 0x3c77b2a8),
    new int64(0x81c2c92e, 0x47edaee6), new int64(0x92722c85, 0x1482353b),
    new int64(0xa2bfe8a1, 0x4cf10364), new int64(0xa81a664b, 0xbc423001),
    new int64(0xc24b8b70, 0xd0f89791), new int64(0xc76c51a3, 0x0654be30),
    new int64(0xd192e819, 0xd6ef5218), new int64(0xd6990624, 0x5565a910),
    new int64(0xf40e3585, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),
    new int64(0x19a4c116, 0xb8d2d0c8), new int64(0x1e376c08, 0x5141ab53),
    new int64(0x2748774c, 0xdf8eeb99), new int64(0x34b0bcb5, 0xe19b48a8),
    new int64(0x391c0cb3, 0xc5c95a63), new int64(0x4ed8aa4a, 0xe3418acb),
    new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, 0xd6b2b8a3),
    new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),
    new int64(0x84c87814, 0xa1f0ab72), new int64(0x8cc70208, 0x1a6439ec),
    new int64(0x90befffa, 0x23631e28), new int64(0xa4506ceb, 0xde82bde9),
    new int64(0xbef9a3f7, 0xb2c67915), new int64(0xc67178f2, 0xe372532b),
    new int64(0xca273ece, 0xea26619c), new int64(0xd186b8c7, 0x21c0c207),
    new int64(0xeada7dd6, 0xcde0eb1e), new int64(0xf57d4f7f, 0xee6ed178),
    new int64(0x06f067aa, 0x72176fba), new int64(0x0a637dc5, 0xa2c898a6),
    new int64(0x113f9804, 0xbef90dae), new int64(0x1b710b35, 0x131c471b),
    new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),
    new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, 0x9c100d4c),
    new int64(0x4cc5d4be, 0xcb3e42b6), new int64(0x597f299c, 0xfc657e2a),
    new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)];

    var W = new Array(64);
    var a, b, c, d, e, f, g, h, i, j;
    var T1, T2;
    var charsize = 8;

    function utf8_encode(str) {
      return unescape(encodeURIComponent(str));
    }

    function str2binb(str) {
      var bin = [];
      var mask = (1 << charsize) - 1;
      var len = str.length * charsize;

      for (var i = 0; i < len; i += charsize) {
        bin[i >> 5] |= (str.charCodeAt(i / charsize) & mask) << (32 - charsize - (i % 32));
      }

      return bin;
    }

    function binb2hex(binarray) {
      var hex_tab = '0123456789abcdef';
      var str = '';
      var length = binarray.length * 4;
      var srcByte;

      for (var i = 0; i < length; i += 1) {
        srcByte = binarray[i >> 2] >> ((3 - (i % 4)) * 8);
        str += hex_tab.charAt((srcByte >> 4) & 0xF) + hex_tab.charAt(srcByte & 0xF);
      }

      return str;
    }

    function safe_add_2(x, y) {
      var lsw, msw, lowOrder, highOrder;

      lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);
      msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);
      lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);

      lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);
      msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);
      highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);

      return new int64(highOrder, lowOrder);
    }

    function safe_add_4(a, b, c, d) {
      var lsw, msw, lowOrder, highOrder;

      lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);
      msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);
      lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);

      lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);
      msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);
      highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);

      return new int64(highOrder, lowOrder);
    }

    function safe_add_5(a, b, c, d, e) {
      var lsw, msw, lowOrder, highOrder;

      lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);
      msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);
      lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);

      lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);
      msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);
      highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);

      return new int64(highOrder, lowOrder);
    }

    function maj(x, y, z) {
      return new int64(
        (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),
        (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)
      );
    }

    function ch(x, y, z) {
      return new int64(
        (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),
        (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)
      );
    }

    function rotr(x, n) {
      if (n <= 32) {
        return new int64(
          (x.highOrder >>> n) | (x.lowOrder << (32 - n)),
          (x.lowOrder >>> n) | (x.highOrder << (32 - n))
        );
      } else {
        return new int64(
          (x.lowOrder >>> n) | (x.highOrder << (32 - n)),
          (x.highOrder >>> n) | (x.lowOrder << (32 - n))
        );
      }
    }

    function sigma0(x) {
      var rotr28 = rotr(x, 28);
      var rotr34 = rotr(x, 34);
      var rotr39 = rotr(x, 39);

      return new int64(
        rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,
        rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder
      );
    }

    function sigma1(x) {
      var rotr14 = rotr(x, 14);
      var rotr18 = rotr(x, 18);
      var rotr41 = rotr(x, 41);

      return new int64(
        rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,
        rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder
      );
    }

    function gamma0(x) {
      var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);

      return new int64(
        rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,
        rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder
      );
    }

    function gamma1(x) {
      var rotr19 = rotr(x, 19);
      var rotr61 = rotr(x, 61);
      var shr6 = shr(x, 6);

      return new int64(
        rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,
        rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder
      );
    }

    function shr(x, n) {
      if (n <= 32) {
        return new int64(
          x.highOrder >>> n,
          x.lowOrder >>> n | (x.highOrder << (32 - n))
        );
      } else {
        return new int64(
          0,
          x.highOrder << (32 - n)
        );
      }
    }

    str = utf8_encode(str);
    strlen = str.length * charsize;
    str = str2binb(str);

    str[strlen >> 5] |= 0x80 << (24 - strlen % 32);
    str[(((strlen + 128) >> 10) << 5) + 31] = strlen;

    for (var i = 0; i < str.length; i += 32) {
      a = H[0];
      b = H[1];
      c = H[2];
      d = H[3];
      e = H[4];
      f = H[5];
      g = H[6];
      h = H[7];

      for (var j = 0; j < 80; j++) {
        if (j < 16) {
          W[j] = new int64(str[j * 2 + i], str[j * 2 + i + 1]);
        } else {
          W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);
        }

        T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);
        T2 = safe_add_2(sigma0(a), maj(a, b, c));
        h = g;
        g = f;
        f = e;
        e = safe_add_2(d, T1);
        d = c;
        c = b;
        b = a;
        a = safe_add_2(T1, T2);
      }

      H[0] = safe_add_2(a, H[0]);
      H[1] = safe_add_2(b, H[1]);
      H[2] = safe_add_2(c, H[2]);
      H[3] = safe_add_2(d, H[3]);
      H[4] = safe_add_2(e, H[4]);
      H[5] = safe_add_2(f, H[5]);
      H[6] = safe_add_2(g, H[6]);
      H[7] = safe_add_2(h, H[7]);
    }

    var binarray = [];
    for (var i = 0; i < H.length; i++) {
      binarray.push(H[i].highOrder);
      binarray.push(H[i].lowOrder);
    }
    return binb2hex(binarray);
  }

</script>